{"version":3,"file":"component---src-pages-post-mdx-frontmatter-slug-js-content-file-path-posts-6-30-mdx-010add885a506f27477a.js","mappings":"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","sources":["webpack://stinsonmaas.com/./posts/6-30.mdx","webpack://stinsonmaas.com/./src/pages/post/{mdx.frontmatter__slug}.js","webpack://stinsonmaas.com/./src/components/layout.module.css","webpack://stinsonmaas.com/./src/components/layout.js","webpack://stinsonmaas.com/./src/components/seo.js","webpack://stinsonmaas.com/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"First Music Post!\"), \"\\n\", React.createElement(_components.p, null, \"Today I revisted an old project from 2021, take a listen:\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"audio\", {\n    controls: true,\n    src: \"/s1.mp3\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/mariostinson-maas/Documents/stinsonmaas/stinsonmaas.com/posts/6-30.mdx\";\nimport * as React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../../components/layout';\nimport Seo from '../../components/seo';\nconst PostPage = ({data, children}) => {\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"p\", null, data.mdx.frontmatter.date), React.createElement(\"h1\", null, data.mdx.fronmatter.title), React.createElement(\"br\"), children);\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: {eq: $id}) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n      }\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title\n});\nPostPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--78b04\";\nexport var currentPage = \"layout-module--current-page--30088\";\nexport var logo = \"layout-module--logo--ff776\";\nexport var navLinks = \"layout-module--nav-links--1113b\";\nexport var split = \"layout-module--split--da352\";","import * as React from 'react'\nimport { Link } from 'gatsby'\nimport {\n  container,\n  // heading,\n  navLinks,\n  split,\n  currentPage,\n  logo\n} from './layout.module.css'\n\nconst Layout = ({ pageTitle, children }) => {\n\n  function PageLinkTest({ page, link}) {\n    if (page === pageTitle) {\n      return <li><Link to={link} className={currentPage}>{page}</Link></li>;\n    } else return <li><Link to={link}>{page}</Link></li>;\n  }\n\n  function SplitPageLinkTest({ page, link}) {\n    if (page === pageTitle) {\n      return <li className={split}><Link to={link} className={currentPage}>{page}</Link></li>;\n    } else return <li className={split}><Link to={link}>{page}</Link></li>;\n  }\n  \n  return (\n    <div className={container}>\n      <nav>\n        <Link to=\"/\" className={logo}>Mario<br/>Stinson-Maas</Link>\n        <ul className={navLinks}>\n          <PageLinkTest page=\"Posts\" link=\"/post\" />\n          <PageLinkTest page=\"About\" link=\"/about\" />\n          <PageLinkTest page=\"Resume\" link=\"/resume\" />\n          <SplitPageLinkTest page=\"Contact\" link=\"/contact\" />\n        </ul>\n      </nav>\n      <main>\n        {children}\n      </main>\n      <footer>\n\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout","import * as React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Seo = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <title>{title} | {data.site.siteMetadata.title}</title>\n  )\n}\n\nexport default Seo","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","_provideComponents","components","React","controls","src","wrapper","MDXLayout","PostPage","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","date","fronmatter","Head","_ref2","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","currentPage","split","PageLinkTest","page","link","Link","to","className","SplitPageLinkTest","_ref3","useStaticQuery","site","siteMetadata","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}